import { memory: Memory, STRING_BYTE_LENGTH: i32, log: Log } from 'env';
import { setBaseAddress } from '../malloc';
import { getStringIterator, next, decodeLEB } from '../string';
import { StringIterator } from '../string';

type Log = (i32) => void;

const EOL: i32 = 10;
const EOF: i32 = 0;

let byteOffset: i32 = 0;
let pos: i32 = 0;
let col: i32 = 0;
let line: i32 = 1;
let iterator: StringIterator = 0;

function start() {
  log(42);
  setBaseAddress(STRING_BYTE_LENGTH);
  iterator = getStringIterator(0);
}

export function _next(): i32 {
  next(iterator);
  const character: i32 = iterator.value;
  if (character == EOL) {
    col = 0;
    line += 1;
  } else {
    col += 1;
  }

  return character;
}

export function _column() : i32 {
  return col;
}

export function _line(): i32 {
  return line;
}

export function _peek(): i32 {
  // decodeLEB gives a i64 so that it can return an updated address and value
  // we only need the value, since the address is not changed for the iterator
  const result: i64 = decodeLEB(iterator.addr);
  return (result : i32);
}
